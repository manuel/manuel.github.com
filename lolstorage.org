#+OPTIONS: toc:nil num:nil
#+TITLE: lolstorage: laughably good social networking and content sharing
#+AUTHOR: Manuel Simoni
#+EMAIL: msimoni@gmail.com

/lolstorage/'s approach to P2P [[http://twitter.com][/social networking/]] and /content
sharing/ is to layer a /Git/-style model with /commits/ and
/trees-of-hashes/ (for representing histories of filesystem trees) on
top of a /cryptographic capability/ system inspired by [[http://tahoe-lafs.org/~zooko/lafs.pdf][/Tahoe-LAFS/]]
(for integrity and privacy of content even when stored on untrusted
providers). It runs in the browser in JavaScript and uses local
storage APIs.  Application data is stored as filesystem trees.  An
example Twitter-like app may store a user's tweets in a YYYY/MM/DD
directory structure.

The user's /wallet/ contains write-caps for the user's /refs/ (which
are mutable pointers to commits), and is encrypted with a
passphrase. The user may generate a read-cap for a ref and share it
with other peers. This read-cap allows the peers to locally /clone/
the state of the shared ref, which is similar to /following/ in
Twitter. The local clone can be updated efficiently, using similar
methods as those used in Git fetching and pushing. There is no shared
state; only a single user ever writes to a ref. Presented to users is
a locally computed /overlay/ of content from local and cloned remote
refs (e.g. a Twitter-like timeline) that may index the content to
provide services like search and sorted and aggregated views.

The resulting system is simple, secure, and disruption-tolerant
vaporware.

* Cryptography

** Mutable ref

[[[lolstorage/diagrams/mutable.png]]

----------
